<?php
/**
 * Plugin Name:         Bad Behavior
 * Version:             3.0.0
 * Description:         Deny automated spambots access to your PHP-based website.
 * Plugin URI:          https://github.com/svl-studios/bad-behavior
 * Author:              Kevin Provance, Michael Hampton (original)
 * Author URI:          https://github.com/svl-studios
 * Requires at least:   5.0
 * Requires PHP:        8.0
 * License:             GPLv3 or later
 * License URI:         http://www.gnu.org/licenses/gpl-3.0.txt
 * Text Domain:         bad-behavior
 *
 * Bad Behavior - detects and blocks unwanted Web access.
 * Copyright (C) 2005 - 2012 Michael Hampton
 * Copyright (C) 2024 - Kevin Provance/SVL Studios
 *
 * Bad Behavior is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 3 of the License, or (at your option) any
 * later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE.
 *
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with this program.
 *
 * If not, see <http://www.gnu.org/licenses/>.
 *
 * @package             BadBehavior
 * @author              Kevin Provance/SVL Studios
 * @license             GNU General Public License, version 3
 * @copyright           2024 SVL Studios
 */

defined( 'ABSPATH' ) || exit;

global $bb2_result;

$bb2_mtime       = explode( ' ', microtime() );
$bb2_timer_start = $bb2_mtime[1] . $bb2_mtime[0];

/**
 * Const.
 */
const BB2_CWD = __DIR__;

/**
 * Bad Behavior callback functions.
 */
require_once 'bad-behavior-mysql.php';

/**
 * Return current time in the format preferred by your database.
 */
function bb2_db_date(): string {
	return get_gmt_from_date( current_time( 'mysql' ) );
}

/**
 * Escape a string for database usage.
 *
 * @param string $str String to escape.
 *
 * @return string|array
 */
function bb2_db_escape( string $str ): string|array { //phpcs:ignore  Generic.PHP.Syntax.PHPSyntax
	return esc_sql( $str );
}

/**
 * Run a query and return the results, if any.
 * Should return FALSE if an error occurred.
 * Bad Behavior will use the return value here in other callbacks.
 *
 * @param string $query DB query.
 *
 * @return array|false|object|stdClass[]|null
 */
function bb2_db_query( string $query ): array|object|bool|null {
	global $wpdb;

	$wpdb->hide_errors();
	$result = $wpdb->get_results( $query, ARRAY_A ); //phpcs:ignore WordPress.DB
	if ( defined( 'WP_DEBUG' ) && WP_DEBUG === true ) {
		$wpdb->show_errors();
	}
	if ( $wpdb->last_error ) {
		return false;
	}

	return $result;
}

/**
 * Return all rows in a particular query.
 * Should contain an array of all rows generated by calling mysql_fetch_assoc()
 * or equivalent and appending the result of each call to an array.
 * For WP, this is pretty much a no-op.
 *
 * @param bool|array $result Result.
 *
 * @return array|bool
 */
function bb2_db_rows( bool|array $result ): bool|array {
	return $result;
}

/**
 * Return emergency contact email address.
 *
 * @return string|null
 */
function bb2_email(): ?string {
	return get_bloginfo( 'admin_email' );
}

/**
 * Retrieve whitelist.
 *
 * @return false|mixed|null
 */
function bb2_read_whitelist(): mixed {
	return get_option( 'bad_behavior_whitelist' );
}

/**
 * Retrieve settings from the database.
 *
 * @return mixed
 */
function bb2_read_settings(): mixed {
	global $wpdb;

	// Add in default settings when they aren't yet present in WP.
	$settings = get_option( 'bad_behavior_settings' );
	if ( ! $settings ) {
		$settings = array();
	}

	return array_merge(
		array(
			'log_table'               => $wpdb->prefix . 'bad_behavior',
			'display_stats'           => false,
			'strict'                  => false,
			'verbose'                 => false,
			'logging'                 => true,
			'httpbl_key'              => '',
			'httpbl_threat'           => '25',
			'httpbl_maxage'           => '30',
			'offsite_forms'           => false,
			'reverse_proxy'           => false,
			'reverse_proxy_header'    => 'X-Forwarded-For',
			'reverse_proxy_addresses' => array(),
		),
		$settings
	);
}

/**
 * Write settings to database.
 *
 * @param array|string $settings Settings.
 *
 * @return void
 */
function bb2_write_settings( array|string $settings ): void {
	update_option( 'bad_behavior_settings', $settings );
}

/**
 * Installation.
 *
 * @return void
 */
function bb2_install(): void {
	$settings = bb2_read_settings();
	if ( ! $settings['logging'] ) {
		return;
	}
	bb2_db_query( bb2_table_structure( $settings['log_table'] ) );
}

/**
 * Cute timer display; screener.
 *
 * @return void
 */
function bb2_insert_head(): void {
	global $bb2_timer_total;

	echo "\n<!-- Bad Behavior " . esc_html( BB2_VERSION ) . ' run time: ' . number_format( 1000 * $bb2_timer_total, 3 ) . " ms -->\n";
}

/**
 * Save approved callback.
 *
 * @param array $package Package.
 *
 * @return void
 */
function bb2_approved_callback( array $package ): void {
	global $bb2_package;

	// Save package for possible later use.
	$bb2_package = $package;
}

/**
 * Capture missed spam and log it.
 *
 * @param int|string $id      ID.
 * @param WP_Comment $comment Comment.
 *
 * @return void
 */
function bb2_capture_spam( int|string $id, WP_Comment $comment ): void {
	global $bb2_package;

	// Capture only spam.
	if ( 'spam' !== $comment->comment_approved ) {
		return;
	}

	// Don't capture if HTTP request no longer active.
	if ( array_key_exists( 'request_entity', $bb2_package ) && array_key_exists( 'author', $bb2_package['request_entity'] ) && $bb2_package['request_entity']['author'] === $comment->comment_author ) {
		bb2_db_query( bb2_insert( bb2_read_settings(), $bb2_package, '00000000' ) );
	}
}

/**
 * Display stats?
 *
 * @param bool $force Force insert.
 *
 * @return void
 */
function bb2_insert_stats( bool $force = false ): void {
	global $bb2_result;

	$settings = bb2_read_settings();

	if ( $force || $settings['display_stats'] ) {
		$blocked = bb2_db_query( 'SELECT COUNT(*) FROM ' . $settings['log_table'] . " WHERE `key` NOT LIKE '00000000'" );
		if ( false !== $blocked ) {
			printf( '<p><a href="https://github.com/svl-studios/bad-behavior">%1$s</a> %2$s <strong>%3$s</strong> %4$s</p>', esc_html__( 'Bad Behavior', 'bad-behavior' ), esc_html__( 'has blocked', 'bad-behavior' ), esc_html( $blocked[0]['COUNT(*)'] ), esc_html__( 'access attempts in the last 7 days.', 'bad-behavior' ) );
		}
	}
	if ( ! empty( $bb2_result ) ) {
		printf( "\n<!-- Bad Behavior result was %s! This request would have been blocked. -->\n", esc_html( $bb2_result ) );
		unset( $bb2_result );
	}
}

register_activation_hook( __FILE__, 'bb2_install' );

add_action( 'wp_head', 'bb2_insert_head' );
add_action( 'wp_footer', 'bb2_insert_stats' );
add_action( 'wp_insert_comment', 'bb2_capture_spam', 99, 2 );

// Calls inward to Bad Behavior itself.
require_once BB2_CWD . '/bad-behavior/core.inc.php';

if ( is_admin() ) {
	require_once BB2_CWD . '/bad-behavior-wordpress-admin.php';
}

$bb2_result = bb2_start( bb2_read_settings() );

$bb2_mtime       = explode( ' ', microtime() );
$bb2_timer_stop  = $bb2_mtime[1] . $bb2_mtime[0];
$bb2_timer_total = $bb2_timer_stop - $bb2_timer_start;
